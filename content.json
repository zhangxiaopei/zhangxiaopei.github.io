{"meta":{"title":"BLOG","subtitle":null,"description":null,"author":"zhangxiaopei","url":"https://zhangxiaopei.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-05-10T05:24:11.629Z","updated":"2020-05-10T05:24:11.629Z","comments":false,"path":"categories/index.html","permalink":"https://zhangxiaopei.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-10T06:03:57.599Z","updated":"2020-05-10T06:03:57.599Z","comments":false,"path":"about/index.html","permalink":"https://zhangxiaopei.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"网络相关概念","slug":"网络相关概念","date":"2020-05-10T13:41:39.000Z","updated":"2020-05-10T14:42:39.106Z","comments":true,"path":"2020/05/10/网络相关概念/","link":"","permalink":"https://zhangxiaopei.github.io/2020/05/10/网络相关概念/","excerpt":"","text":"TCP/IPTCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是 TCP 和 IP，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。 IP协议（Internet Protocol）主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。 IPv4: 地址是四个用 “.” 分隔的数字，例如“192.168.0.1”，总共有 2^32 个可以分配的地址。 IPv6: 地址用八组 “:” 分隔的数字，例如“ABCD:EF01:2345:6789:ABCD:EF01:2345:6789”，总共有 2^128 个可以分配的地址。 TCP协议（Transmission Control Protocol）位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。 DNS（域名系统，Domain Name System）域名用“.”分隔成多个单词，级别从左到右逐级升高，最右边的被称为“顶级域名”。 顶级域名: 表示商业公司的“com”、表示教育机构的“edu”，表示国家的“cn”“uk”等域名解析: 把域名 映射到真实的 IP地址。 URI（统一资源标识符，Uniform Resource Identifier）/URL（统一资源定位符， Uniform Resource Locator）URL 实际上是 URI 的一个子集，两者差异不大，所以一般不会做严格的区分。 Tips: URI 是 Identifier，打个比方，我们能通过 URI 来找到小明，然而找到小明可以有多种方式，我们可以通过 Location 来找到小明，即：URL；也可以通过 Name 来找到小明，即：URN。URL 和 URN 都是 URI 的子集。 三个基本的部分构成： 协议名：即访问该资源应当使用的协议，例如：https 主机名：即互联网上主机的标记，可以是域名或 IP 地址，例如：zhangxiaopei.github.io 路径：即资源在主机上的位置，使用“/”分隔多级目录, 例如：2020/05/10/网络相关概念/ HTTPS全称是“HTTP over SSL/TLS”，也就是运行在 SSL/TLS 协议上的 HTTP。 SSL: Secure Socket LayerTLS: Transport Layer Security 代理（Proxy）代理的种类： 匿名代理：完全“隐匿”了被代理的机器，外界看到的只是代理服务器； 透明代理：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端； 正向代理：靠近客户端，代表客户端向服务器发送请求； 反向代理：靠近服务器端，代表服务器响应客户端的请求； CDN，实际上就是一种代理，它代替源站服务器响应客户端的请求，通常扮演着透明代理和反向代理的角色。 代理的应用： 负载均衡：把访问请求均匀分散到多台机器，实现访问集群化； 内容缓存：暂存上下行的数据，减轻后端的压力； 安全防护：隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器； 数据处理：提供压缩、加密等额外的功能。","categories":[{"name":"网络基础","slug":"网络基础","permalink":"https://zhangxiaopei.github.io/categories/网络基础/"}],"tags":[]},{"title":"symbolicatecrash解析crash文件","slug":"symbolicatecrash解析crash文件","date":"2020-05-09T12:46:42.598Z","updated":"2020-05-10T13:50:07.959Z","comments":true,"path":"2020/05/09/symbolicatecrash解析crash文件/","link":"","permalink":"https://zhangxiaopei.github.io/2020/05/09/symbolicatecrash解析crash文件/","excerpt":"","text":"导出crash文件Xcode —&gt; Window —&gt; Devices and Simulators —&gt; View Device Logs ，然后选中导出。 找到.app文件和.dsym文件 .app文件：直接解压缩.ipa文件，在Payload文件夹里面取得 .dsym文件：.xcarchive文件显示包内容，在dSYMs文件夹里面取得 找到symbolicatecrash文件在terminal输入以下命令找到symbolicatecrash文件路径 1find /Applications/Xcode.app -name symbolicatecrash -type f 然后拷贝到自己新建的文件夹 1cp /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash ~/Desktop/crash 解析将上面所有文件放在同一个文件夹里面，然后在terminal中用cd命令进入这个文件夹，用下面命令进行解析，并输出txt文件 1./symbolicatecrash ./2018-5-1\\ 上午11-07.crash &gt;log.txt 附 Error: “DEVELOPER_DIR” is not defined at ./symbolicatecrash line 69.解决办法，在terminal中输入： 1export DEVELOPER_DIR=&quot;/Applications/Xcode.app/Contents/Developer&quot; 查看.app 文件 uuid 1dwarfdump --uuid xxx.app/xxx 查看.dsym 文件 uuid 1dwarfdump --uuid xxxx.dSYM","categories":[{"name":"开发调试","slug":"开发调试","permalink":"https://zhangxiaopei.github.io/categories/开发调试/"}],"tags":[]},{"title":"用Github+Hexo搭建个人博客","slug":"用Github-Hexo搭建个人博客","date":"2019-08-05T08:43:50.000Z","updated":"2020-05-10T13:48:59.900Z","comments":true,"path":"2019/08/05/用Github-Hexo搭建个人博客/","link":"","permalink":"https://zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/","excerpt":"","text":"Github 新建 Repository点击“New”按钮，在Repository Name处输入“用户名.github.io”，注意此处的“用户名”必须为Github的帐号名称，例如截图中需输入“zhangxiaopei.github.io”，这是固定写法，写错的话后续访问会找不到界面（404） 环境配置 下载nvm 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash Tips： 如果这里出现443端口连接被拒 (Failed to connect to raw.githubusercontent.com port 443: Connection refused) 的情况，一般是因为墙的原因，可以配置下代理: 1export https_proxy=http://127.0.0.1:xxx http_proxy=http://127.0.0.1:xxx all_proxy=socks5://127.0.0.1:xxx 再执行下上面命令即可。 配置环境变量 123export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completion 安装 node 1nvm install stable 安装 hexo 1npm install -g hexo-cli hexo的使用初始化1hexo init blogProjectName 初始化完成之后，就会在指定目录下创建一个文件夹 其中_config.yml是配置文件，source存放所有md文件，themes存放主题信息 预览1hexo s 然后就可以在浏览器输入 http://localhost:4000 预览了 新建博客1hexo n &quot;title&quot; 当然也可以直接把已经存在md文件拖进来，然后在顶部加上以下代码，否则预览的时候旁边的导航栏会取不到title 123---title: title--- 生成静态网页1hexo g 刷新一下 http://localhost:4000 就可以看到新建的博客了 将博客地址部署到服务器修改_config.yml中deploy的配置 然后执行 1hexo d 部署成功之后，就可以输入 https://zhangxiaopei.github.io 查看自己的博客啦～～ Tips: 出现 Deployer not found: github 错误，可安装下插件 1npm install hexo-deployer-git --save Tips: 出现 TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object 错误，是因为node版本太高了，降低node版本就行了（我原本使用的是v14.2.0，降级为v12.14.0就ok了） 图片使用 修改_config.yml中post_asset_folder参数，改为true 安装插件 1npm install https://github.com/CodeFalling/hexo-asset-image -- save 运行 hexo n 命令生成文件的时候，就会自动创建文件夹了 在md文件中用 ![](xxx/xxx.jpg) 的方式引用，执行hexo g命令后，可在public文件夹中指定路径下的index.html文件中看到图片的路径 Tips: 图片引用使用此路径 (xxxx/图片名.jpg) 即可，不要使用绝对路径 其中的 yoursite.com 为预览图片时候访问的域名，可以在_config.yml中配置，如果是本地预览，需将url改成 http://localhost:4000，如果要部署到服务器，将url改成 https://zhangxiaopei.github.io 即可 备注： 由于hexo3版本后对很多插件支持有问题，hexo-asset-image插件在处理data.permalink链接时出现路径错误，导致index.html文件中图片的默认路径不对，可下载以下插件修复 1npm install https://github.com/7ym0n/hexo-asset-image --sa 主题官方下载地址 https://hexo.io/themes/index.html 下载后放进themes文件夹里，然后修改_config.yml文件中的theme参数即可","categories":[{"name":"博客","slug":"博客","permalink":"https://zhangxiaopei.github.io/categories/博客/"}],"tags":[]}],"categories":[{"name":"网络基础","slug":"网络基础","permalink":"https://zhangxiaopei.github.io/categories/网络基础/"},{"name":"开发调试","slug":"开发调试","permalink":"https://zhangxiaopei.github.io/categories/开发调试/"},{"name":"博客","slug":"博客","permalink":"https://zhangxiaopei.github.io/categories/博客/"}],"tags":[]}