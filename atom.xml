<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangxiaopei.github.io/"/>
  <updated>2020-05-11T14:42:16.277Z</updated>
  <id>https://zhangxiaopei.github.io/</id>
  
  <author>
    <name>zhangxiaopei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加密、数字签名与证书</title>
    <link href="https://zhangxiaopei.github.io/2020/05/10/%E5%8A%A0%E5%AF%86%E3%80%81%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E4%B8%8E%E8%AF%81%E4%B9%A6/"/>
    <id>https://zhangxiaopei.github.io/2020/05/10/%E5%8A%A0%E5%AF%86%E3%80%81%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E4%B8%8E%E8%AF%81%E4%B9%A6/</id>
    <published>2020-05-10T14:48:26.000Z</published>
    <updated>2020-05-11T14:42:16.277Z</updated>
    
    <content type="html"><![CDATA[<p>“加密”（encrypt），就是把消息用某种方式转换成谁也看不懂的乱码，只有掌握特殊“钥匙”的人才能再转换出原始文本。这里的“钥匙”就叫做“密钥”（key），加密前的消息叫“明文”（plain text/clear text），加密后的乱码叫“密文”（cipher text），使用密钥还原明文的过程叫“解密”（decrypt），是加密的反操作，加密解密的操作过程就是“加密算法”。</p><h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>对称加密指加密和解密时使用的密钥都是同一个，是“对称”的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性。</p><p>对称加密算法有 RC4、DES、3DES、AES、ChaCha20 等，但前三种算法都被认为是不安全的，通常都禁止使用，目前常用的只有 AES 和 ChaCha20。</p><p>对称算法还有一个“分组模式”的概念。</p><p>分组模式：DES和AES都属于分组密码，它们只能加密固定长度的明文。如果需要加密任意长度的明文，就需要对分组密码进行迭代，而分组密码的迭代方法就称为分组密码的“模式”。</p><p>主要模式：</p><ul><li>ECB模式：Electronic Code Book mode（电子密码本模式）</li><li>CBC模式：Cipher Block Chaining mode（密码分组链接模式）（推荐使用）</li><li>CFB模式：Cipher FeedBack mode（密文反馈模式）</li><li>OFB模式：Output FeedBack mode（输出反馈模式）</li><li>CTR模式：CounTeR mode（计数器模式）（推荐使用）</li></ul><p>拿ECB来举例子，假设使用AES128，密钥长度是16字节，那么就把明文按16字节分组，然后每个分组用密钥加密。其他的CBC、OFB等的方法类似，但细节不同，例如CBC增加了初始向量。</p><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>对称加密有一个很大的问题：如何把密钥安全地传递给对方，术语叫“密钥交换”。所以就出现非对称加密。</p><p>非对称加密有两个密钥，一个叫“公钥”（public key），一个叫“私钥”（private key）。两个密钥是不同的，“不对称”，公钥可以公开给任何人使用，而私钥必须严格保密。</p><p>公钥和私钥有个特别的“单向”性，虽然都可以用来加密解密，但公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密。</p><p>非对称加密有DH、DSA、RSA、ECC 等。其中，RSA可能是最著名的一个，几乎可以说是非对称加密的代名词，它的安全性基于“整数分解”的数学难题，使用两个超大素数的乘积作为生成密钥的材料，想要从公钥推算出私钥是非常困难的。</p><h1 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h1><p>虽然非对称加密没有“密钥交换”的问题，但是由于非对称加密的实现都是基于复杂的数学难题，运算速度慢。所以需要结合对称加密和非对称加密，也就是混合加密。</p><p>具体流程：</p><ul><li>在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题。</li><li>然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。</li><li>对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密。</li></ul><h1 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h1><p>黑客虽然拿不到会话密钥，无法破解密文，但可以通过窃听收集到足够多的密文，再尝试着修改、重组后发给网站。因为没有完整性保证，服务器只能“照单全收”，然后他就可以通过服务器的响应获取进一步的线索，最终就会破解出明文。所以，需要实现完整性。</p><p>实现完整性的手段主要是摘要算法（Digest Algorithm），也就是常说的散列函数、哈希函数（Hash Function）。</p><p>一般的摘要算法有MD5（Message-Digest 5）、SHA-1（Secure Hash Algorithm 1），它们就是最常用的两个摘要算法，能够生成 16 字节和 20 字节长度的数字摘要。但这两个算法的安全强度比较低，不够安全，在 TLS 里已经被禁止使用了。</p><p>目前 TLS 推荐使用的是 SHA-1 的后继者：SHA-2。SHA-2 实际上是一系列摘要算法的统称，总共有 6 种，常用的有 SHA224、SHA256、SHA384，分别能够生成 28 字节、32 字节、48 字节的摘要。</p><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><p>黑客可以伪装成网站来窃取信息。而反过来，他也可以伪装成你，向网站发送支付、转账等消息，网站没有办法确认你的身份，钱可能就这么被偷走了。所以，需要实现身份认证。</p><p>数字签名可以实现身份认证。</p><p>使用私钥再加上摘要算法，就能够实现“数字签名”，同时实现“身份认证”和“不可否认”。</p><p>数字签名的原理其实很简单，就是把公钥私钥的用法反过来，之前是公钥加密、私钥解密，现在是私钥加密、公钥解密。</p><p>比如，你用自己的私钥签名一个消息“我是小明”。网站收到后用你的公钥验签，确认身份没问题，于是也用它的私钥签名消息“我是某宝”。你收到后再用它的公钥验一下，也没问题，这样你和网站就都知道对方不是假冒的，后面就可以用混合加密进行安全通信了。</p><h1 id="数字证书和-CA"><a href="#数字证书和-CA" class="headerlink" title="数字证书和 CA"></a>数字证书和 CA</h1><p>因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段。所以我们需要CA（Certificate Authority，证书认证机构）。由它来给各个公钥签名，用自身的信誉来保证公钥无法伪造，是可信的。</p><p>CA 对公钥的签名认证也是有格式的，包含序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书”（Certificate）。</p><p>证书信任链：</p><ul><li>客户端得到服务端返回的证书，通过读取得到 服务端证书的发布机构（Issuer）</li><li>客户端去操作系统查找这个发布机构的的证书，如果是不是根证书就继续递归下去 直到拿到根证书。</li><li>用 根证书的公钥 去 解密验证 上一层证书的合法性，再拿上一层证书的公钥去验证更上层证书的合法性；递归回溯。</li><li>最后验证服务器端的证书是 可信任 的。</li></ul><p><img src="//zhangxiaopei.github.io/2020/05/10/加密、数字签名与证书/1.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“加密”（encrypt），就是把消息用某种方式转换成谁也看不懂的乱码，只有掌握特殊“钥匙”的人才能再转换出原始文本。这里的“钥匙”就叫做“密钥”（key），加密前的消息叫“明文”（plain text/clear text），加密后的乱码叫“密文”（cipher text
      
    
    </summary>
    
    
      <category term="网络基础" scheme="https://zhangxiaopei.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>网络相关概念</title>
    <link href="https://zhangxiaopei.github.io/2020/05/10/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <id>https://zhangxiaopei.github.io/2020/05/10/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</id>
    <published>2020-05-10T13:41:39.000Z</published>
    <updated>2020-05-10T14:42:39.106Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//zhangxiaopei.github.io/2020/05/10/网络相关概念/1.png" alt="图片来自网络"></p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>TCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是 TCP 和 IP，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。</p><h2 id="IP协议（Internet-Protocol）"><a href="#IP协议（Internet-Protocol）" class="headerlink" title="IP协议（Internet Protocol）"></a>IP协议（Internet Protocol）</h2><p>主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。</p><ul><li>IPv4: 地址是四个用 “.” 分隔的数字，例如“192.168.0.1”，总共有 2^32 个可以分配的地址。</li><li>IPv6: 地址用八组 “:” 分隔的数字，例如“ABCD:EF01:2345:6789:ABCD:EF01:2345:6789”，总共有 2^128 个可以分配的地址。</li></ul><h2 id="TCP协议（Transmission-Control-Protocol）"><a href="#TCP协议（Transmission-Control-Protocol）" class="headerlink" title="TCP协议（Transmission Control Protocol）"></a>TCP协议（Transmission Control Protocol）</h2><p>位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。</p><h2 id="DNS（域名系统，Domain-Name-System）"><a href="#DNS（域名系统，Domain-Name-System）" class="headerlink" title="DNS（域名系统，Domain Name System）"></a>DNS（域名系统，Domain Name System）</h2><p>域名用“.”分隔成多个单词，级别从左到右逐级升高，最右边的被称为“顶级域名”。</p><blockquote><p>顶级域名: 表示商业公司的“com”、表示教育机构的“edu”，表示国家的“cn”“uk”等<br>域名解析: 把域名 映射到真实的 IP地址。</p></blockquote><h2 id="URI（统一资源标识符，Uniform-Resource-Identifier）-URL（统一资源定位符，-Uniform-Resource-Locator）"><a href="#URI（统一资源标识符，Uniform-Resource-Identifier）-URL（统一资源定位符，-Uniform-Resource-Locator）" class="headerlink" title="URI（统一资源标识符，Uniform Resource Identifier）/URL（统一资源定位符， Uniform Resource Locator）"></a>URI（统一资源标识符，Uniform Resource Identifier）/URL（统一资源定位符， Uniform Resource Locator）</h2><p>URL 实际上是 URI 的一个子集，两者差异不大，所以一般不会做严格的区分。</p><blockquote><p>Tips: URI 是 Identifier，打个比方，我们能通过 URI 来找到小明，然而找到小明可以有多种方式，我们可以通过 Location 来找到小明，即：URL；也可以通过 Name 来找到小明，即：URN。URL 和 URN 都是 URI 的子集。</p></blockquote><p>三个基本的部分构成：</p><ul><li>协议名：即访问该资源应当使用的协议，例如：https</li><li>主机名：即互联网上主机的标记，可以是域名或 IP 地址，例如：zhangxiaopei.github.io</li><li>路径：即资源在主机上的位置，使用“/”分隔多级目录, 例如：2020/05/10/网络相关概念/</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>全称是“HTTP over SSL/TLS”，也就是运行在 SSL/TLS 协议上的 HTTP。</p><blockquote><p>SSL: Secure Socket Layer<br>TLS: Transport Layer Security</p></blockquote><h2 id="代理（Proxy）"><a href="#代理（Proxy）" class="headerlink" title="代理（Proxy）"></a>代理（Proxy）</h2><p>代理的种类：</p><ul><li>匿名代理：完全“隐匿”了被代理的机器，外界看到的只是代理服务器；</li><li>透明代理：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端；</li><li>正向代理：靠近客户端，代表客户端向服务器发送请求；</li><li>反向代理：靠近服务器端，代表服务器响应客户端的请求；</li></ul><blockquote><p>CDN，实际上就是一种代理，它代替源站服务器响应客户端的请求，通常扮演着透明代理和反向代理的角色。</p></blockquote><p>代理的应用：</p><ul><li>负载均衡：把访问请求均匀分散到多台机器，实现访问集群化；</li><li>内容缓存：暂存上下行的数据，减轻后端的压力；</li><li>安全防护：隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器；</li><li>数据处理：提供压缩、加密等额外的功能。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;//zhangxiaopei.github.io/2020/05/10/网络相关概念/1.png&quot; alt=&quot;图片来自网络&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="网络基础" scheme="https://zhangxiaopei.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>symbolicatecrash解析crash文件</title>
    <link href="https://zhangxiaopei.github.io/2020/05/09/symbolicatecrash%E8%A7%A3%E6%9E%90crash%E6%96%87%E4%BB%B6/"/>
    <id>https://zhangxiaopei.github.io/2020/05/09/symbolicatecrash%E8%A7%A3%E6%9E%90crash%E6%96%87%E4%BB%B6/</id>
    <published>2020-05-09T12:46:42.598Z</published>
    <updated>2020-05-10T13:50:07.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导出crash文件"><a href="#导出crash文件" class="headerlink" title="导出crash文件"></a>导出crash文件</h2><p>Xcode —&gt; Window —&gt; Devices and Simulators —&gt;  View Device Logs ，然后选中导出。<br><img src="//zhangxiaopei.github.io/2020/05/09/symbolicatecrash解析crash文件/1.jpeg" alt></p><h2 id="找到-app文件和-dsym文件"><a href="#找到-app文件和-dsym文件" class="headerlink" title="找到.app文件和.dsym文件"></a>找到.app文件和.dsym文件</h2><ol><li>.app文件：直接解压缩.ipa文件，在Payload文件夹里面取得</li><li>.dsym文件：.xcarchive文件显示包内容，在dSYMs文件夹里面取得</li></ol><h2 id="找到symbolicatecrash文件"><a href="#找到symbolicatecrash文件" class="headerlink" title="找到symbolicatecrash文件"></a>找到symbolicatecrash文件</h2><p>在terminal输入以下命令找到symbolicatecrash文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /Applications/Xcode.app -name symbolicatecrash -type f</span><br></pre></td></tr></table></figure><p>然后拷贝到自己新建的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash ~/Desktop/crash</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>将上面所有文件放在同一个文件夹里面，然后在terminal中用cd命令进入这个文件夹，用下面命令进行解析，并输出txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./symbolicatecrash ./2018-5-1\ 上午11-07.crash &gt;log.txt</span><br></pre></td></tr></table></figure><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><ol><li><p>Error: “DEVELOPER_DIR” is not defined at ./symbolicatecrash line 69.<br>解决办法，在terminal中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DEVELOPER_DIR=&quot;/Applications/Xcode.app/Contents/Developer&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看.app 文件 uuid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dwarfdump --uuid xxx.app/xxx</span><br></pre></td></tr></table></figure></li><li><p>查看.dsym 文件 uuid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dwarfdump --uuid xxxx.dSYM</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导出crash文件&quot;&gt;&lt;a href=&quot;#导出crash文件&quot; class=&quot;headerlink&quot; title=&quot;导出crash文件&quot;&gt;&lt;/a&gt;导出crash文件&lt;/h2&gt;&lt;p&gt;Xcode —&amp;gt; Window —&amp;gt; Devices and Simul
      
    
    </summary>
    
    
      <category term="开发调试" scheme="https://zhangxiaopei.github.io/categories/%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>用Github+Hexo搭建个人博客</title>
    <link href="https://zhangxiaopei.github.io/2019/08/05/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zhangxiaopei.github.io/2019/08/05/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-08-05T08:43:50.000Z</published>
    <updated>2020-05-10T13:48:59.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-新建-Repository"><a href="#Github-新建-Repository" class="headerlink" title="Github 新建 Repository"></a>Github 新建 Repository</h1><p>点击“New”按钮，在Repository Name处输入“用户名.github.io”，注意此处的“用户名”必须为Github的帐号名称，例如截图中需输入“zhangxiaopei.github.io”，这是固定写法，写错的话后续访问会找不到界面（404）</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/1.jpg" alt></p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/2.jpg" alt></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ol><li>下载nvm</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>Tips： 如果这里出现443端口连接被拒 (<code>Failed to connect to raw.githubusercontent.com port 443: Connection refused</code>) 的情况，一般是因为墙的原因，可以配置下代理:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:xxx http_proxy=http://127.0.0.1:xxx all_proxy=socks5://127.0.0.1:xxx</span><br></pre></td></tr></table></figure><p>再执行下上面命令即可。</p><ol start="2"><li>配置环境变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 node</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><ol start="4"><li>安装 hexo</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="hexo的使用"><a href="#hexo的使用" class="headerlink" title="hexo的使用"></a>hexo的使用</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blogProjectName</span><br></pre></td></tr></table></figure><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/3.jpg" alt></p><p>初始化完成之后，就会在指定目录下创建一个文件夹</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/4.jpg" alt></p><p>其中_config.yml是配置文件，source存放所有md文件，themes存放主题信息</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/5.jpg" alt></p><p>然后就可以在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 预览了</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/6.jpg" alt></p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;title&quot;</span><br></pre></td></tr></table></figure><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/7.jpg" alt></p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/8.jpg" alt></p><p>当然也可以直接把已经存在md文件拖进来，然后在顶部加上以下代码，否则预览的时候旁边的导航栏会取不到title</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: title</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/9.jpg" alt></p><p>刷新一下 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到新建的博客了</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/10.jpg" alt></p><h2 id="将博客地址部署到服务器"><a href="#将博客地址部署到服务器" class="headerlink" title="将博客地址部署到服务器"></a>将博客地址部署到服务器</h2><p>修改_config.yml中deploy的配置</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/11.jpg" alt></p><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署成功之后，就可以输入 <a href="https://zhangxiaopei.github.io">https://zhangxiaopei.github.io</a> 查看自己的博客啦～～</p><p>Tips: 出现 <code>Deployer not found: github</code> 错误，可安装下插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>Tips: 出现 <code>TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</code> 错误，是因为node版本太高了，降低node版本就行了（我原本使用的是v14.2.0，降级为v12.14.0就ok了）</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/19.png" alt></p><h2 id="图片使用"><a href="#图片使用" class="headerlink" title="图片使用"></a>图片使用</h2><ol><li>修改_config.yml中post_asset_folder参数，改为true</li></ol><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/12.jpg" alt></p><ol start="2"><li>安装插件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save</span><br></pre></td></tr></table></figure><ol start="3"><li>运行 hexo n 命令生成文件的时候，就会自动创建文件夹了</li></ol><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/13.jpg" alt></p><ol start="4"><li>在md文件中用 <code>![](xxx/xxx.jpg)</code> 的方式引用，执行hexo g命令后，可在public文件夹中指定路径下的index.html文件中看到图片的路径</li></ol><p>Tips: 图片引用使用此路径 (xxxx/图片名.jpg) 即可，不要使用绝对路径</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/14.jpg" alt></p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/15.jpg" alt></p><p>其中的 yoursite.com 为预览图片时候访问的域名，可以在_config.yml中配置，如果是本地预览，需将url改成 <a href="http://localhost:4000，如果要部署到服务器，将url改成" target="_blank" rel="noopener">http://localhost:4000，如果要部署到服务器，将url改成</a> <a href="https://zhangxiaopei.github.io">https://zhangxiaopei.github.io</a> 即可</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/16.jpg" alt></p><p>备注：</p><p>由于hexo3版本后对很多插件支持有问题，hexo-asset-image插件在处理data.permalink链接时出现路径错误，导致index.html文件中图片的默认路径不对，可下载以下插件修复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --sa</span><br></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>官方下载地址 <a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">https://hexo.io/themes/index.html</a></p><p>下载后放进themes文件夹里，然后修改_config.yml文件中的theme参数即可</p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/17.jpg" alt></p><p><img src="//zhangxiaopei.github.io/2019/08/05/用Github-Hexo搭建个人博客/18.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github-新建-Repository&quot;&gt;&lt;a href=&quot;#Github-新建-Repository&quot; class=&quot;headerlink&quot; title=&quot;Github 新建 Repository&quot;&gt;&lt;/a&gt;Github 新建 Repository&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="博客" scheme="https://zhangxiaopei.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
